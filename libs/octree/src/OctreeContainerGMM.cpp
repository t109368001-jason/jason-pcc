#include <jpcc/octree/OctreeContainerGMM.h>

using namespace std;
using namespace jpcc::math;

namespace jpcc::octree {

//////////////////////////////////////////////////////////////////////////////////////////////
OctreeContainerGMM::OctreeContainerGMM() :
    trainSamples_(make_shared<vector<float>>()), intensity_(numeric_limits<float>::quiet_NaN()), gmm_() {}

//////////////////////////////////////////////////////////////////////////////////////////////
void OctreeContainerGMM::reset() {}

//////////////////////////////////////////////////////////////////////////////////////////////
void OctreeContainerGMM::addPoint(const PointXYZINormal& point) {
  if (!isnan(intensity_)) { return; }

  if (trainSamples_) { trainSamples_->push_back(point.intensity); }
  intensity_ = point.intensity;
}

//////////////////////////////////////////////////////////////////////////////////////////////
void OctreeContainerGMM::initGMM(const int           K,
                                 const double        alpha,
                                 const double        minimumVariance,
                                 std::vector<float>& alternateCentroids) {
  gmm_          = jpcc::make_shared<GMM>(*trainSamples_, K, alpha, minimumVariance, alternateCentroids);
  trainSamples_ = nullptr;
}

//////////////////////////////////////////////////////////////////////////////////////////////
float OctreeContainerGMM::getIntensity() const { return intensity_; }

//////////////////////////////////////////////////////////////////////////////////////////////
float& OctreeContainerGMM::getIntensity() { return intensity_; }

//////////////////////////////////////////////////////////////////////////////////////////////
void OctreeContainerGMM::setIntensity(const float intensity) { this->intensity_ = intensity; }

//////////////////////////////////////////////////////////////////////////////////////////////
const shared_ptr<std::vector<float>>& OctreeContainerGMM::getTrainSamples() const { return trainSamples_; }

//////////////////////////////////////////////////////////////////////////////////////////////
shared_ptr<std::vector<float>>& OctreeContainerGMM::getTrainSamples() { return trainSamples_; }

//////////////////////////////////////////////////////////////////////////////////////////////
const math::GMM::Ptr& OctreeContainerGMM::getGMM() const { return gmm_; }

//////////////////////////////////////////////////////////////////////////////////////////////
math::GMM::Ptr& OctreeContainerGMM::getGMM() { return gmm_; }

}  // namespace jpcc::octree